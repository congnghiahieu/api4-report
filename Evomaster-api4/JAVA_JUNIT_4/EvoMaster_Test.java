import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-02-21T09:32:35.836066500+07:00[Asia/Bangkok]
 * <br>
 * The generated test suite contains 12 tests
 * <br>
 * Covered targets: 17
 * <br>
 * Used time: 0h 15m 5s
 * <br>
 * Needed budget for current results: 72%
 * <br>
 * 
 */
public class EvoMaster_Test {

    
    private static String baseUrlOfSut = "https://6-dot-authentiqio.appspot.com";
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/key?" + 
                    "email=gXospu9N_&" + 
                    "phone=hW79YcIle_lA&" + 
                    "code=M6QbFeVsnY3PYRsc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/problem+json")
                .body("'status'", numberMatches(400.0))
                .body("'doc'", containsString("Incorrect value / format for parameter"))
                .body("'type'", containsString("https://6-dot-authentiqio.appspot.com/error/value-error"))
                .body("'detail'", containsString("Email format error"))
                .body("'title'", containsString("KeyHandler.ValueError: Bad Request"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"phone\": \"0_CEgObJK_Gb\", " + 
                    " \"scope\": \"325\", " + 
                    " \"sub\": \"r_rXG\", " + 
                    " \"type\": \"F\" " + 
                    " } ")
                .post(baseUrlOfSut + "/scope?test=325")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/problem+json")
                .body("'status'", numberMatches(400.0))
                .body("'doc'", containsString("Incorrect value / format for parameter"))
                .body("'type'", containsString("https://6-dot-authentiqio.appspot.com/error/value-error"))
                .body("'detail'", containsString("Job id format error"))
                .body("'title'", containsString("ScopeHandler.ValueError: Bad Request"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/key/1TyLxNZxl6Ivg1Y?secret=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/problem+json")
                .body("'status'", numberMatches(400.0))
                .body("'doc'", containsString("Incorrect value / format for parameter"))
                .body("'type'", containsString("https://6-dot-authentiqio.appspot.com/error/value-error"))
                .body("'detail'", containsString("revoke key needs authorization parameter"))
                .body("'title'", containsString("KeyHandler.ValueError: Bad Request"));
        
        
        given().accept("*/*")
                .head(baseUrlOfSut + "/scope/16KgbaNj8mWM4dt")
                .then()
                .statusCode(405)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .head(baseUrlOfSut + "/scope/ww3UaPQs8lG")
                .then()
                .statusCode(405)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/scope/EaFiZ4Ai")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("405 Method Not Allowed\n\nThe method DELETE is not allowed for this resource. \n\n "));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .post(baseUrlOfSut + "/scope/zb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/problem+json")
                .body("'status'", numberMatches(404.0))
                .body("'doc'", containsString("Not found"))
                .body("'type'", containsString("https://6-dot-authentiqio.appspot.com/error/not-found"))
                .body("'detail'", containsString("Path not defined"))
                .body("'title'", containsString("CatchAll.HttpError: Not Found"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .delete(baseUrlOfSut + "/key/eFGhKnPwE?secret=vx")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/problem+json")
                .body("'status'", numberMatches(404.0))
                .body("'doc'", containsString("Key not registered to a device / key not found"))
                .body("'type'", containsString("https://6-dot-authentiqio.appspot.com/error/unknown-key"))
                .body("'detail'", containsString(""))
                .body("'title'", containsString("KeyHandler.HttpError: Not Found"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/scope/yPPIt59LJSUGndm")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/problem+json")
                .body("'status'", numberMatches(404.0))
                .body("'doc'", containsString("Not found"))
                .body("'type'", containsString("https://6-dot-authentiqio.appspot.com/error/not-found"))
                .body("'detail'", containsString("Path not defined"))
                .body("'title'", containsString("CatchAll.HttpError: Not Found"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/key/enUVupkG")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/problem+json")
                .body("'status'", numberMatches(404.0))
                .body("'doc'", containsString("Key not registered to a device / key not found"))
                .body("'type'", containsString("https://6-dot-authentiqio.appspot.com/error/unknown-key"))
                .body("'detail'", containsString(""))
                .body("'title'", containsString("KeyHandler.HttpError: Not Found"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .head(baseUrlOfSut + "/key/hkLPiscVhyI")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"aud\": \"Rkft7S\", " + 
                    " \"iss\": \"tr7oHz6\", " + 
                    " \"sub\": \"ucVkjtr39mBAXGT\" " + 
                    " } ")
                .post(baseUrlOfSut + "/login?callback=wa8KMKQff")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/problem+json")
                .body("'status'", numberMatches(404.0))
                .body("'doc'", containsString("Not found"))
                .body("'type'", containsString("https://6-dot-authentiqio.appspot.com/error/not-found"))
                .body("'detail'", containsString("Path not defined"))
                .body("'title'", containsString("CatchAll.HttpError: Not Found"));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .delete(baseUrlOfSut + "/key/kzVuhqs?secret=of2ltPfFT6U9bBi4")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/problem+json")
                .body("'status'", numberMatches(404.0))
                .body("'doc'", containsString("Key not registered to a device / key not found"))
                .body("'type'", containsString("https://6-dot-authentiqio.appspot.com/error/unknown-key"))
                .body("'detail'", containsString(""))
                .body("'title'", containsString("KeyHandler.HttpError: Not Found"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .put(baseUrlOfSut + "/scope/u4lBWWuMRuvOs3")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("405 Method Not Allowed\n\nThe method PUT is not allowed for this resource. \n\n "));
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .head(baseUrlOfSut + "/key/8BK7GLhpK6jO")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .head(baseUrlOfSut + "/key/sY")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_1 = given().accept("*/*")
                .get(baseUrlOfSut + "/scope/6MspbrDnEZ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/problem+json")
                .body("'status'", numberMatches(404.0))
                .body("'doc'", containsString("Not found"))
                .body("'type'", containsString("https://6-dot-authentiqio.appspot.com/error/not-found"))
                .body("'detail'", containsString("Path not defined"))
                .body("'title'", containsString("CatchAll.HttpError: Not Found"));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .head(baseUrlOfSut + "/scope/dNiO0mcj")
                .then()
                .statusCode(405)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/scope/9sbsq3VBjH")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("405 Method Not Allowed\n\nThe method DELETE is not allowed for this resource. \n\n "));
        
    }


}
